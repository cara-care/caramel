{"version":3,"sources":["../../../../build/lib/organisms/RNSlider.js"],"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","React","PureComponent","Animated","Image","StyleSheet","PanResponder","View","Easing","ViewPropTypes","PropTypes","TRACK_SIZE","THUMB_SIZE","Rect","x","y","width","height","containsPoint","DEFAULT_ANIMATION_CONFIGS","spring","friction","tension","timing","duration","easing","inOut","ease","delay","Slider","constructor","arguments","state","containerSize","trackSize","thumbSize","allMeasured","value","Value","props","_handleStartShouldSetPanResponder","_thumbHitTest","_handlePanResponderGrant","_previousLeft","_getThumbLeft","_getCurrentValue","_fireChangeEvent","_handlePanResponderMove","gestureState","disabled","_setCurrentValue","_getValue","_handlePanResponderEnd","_measureContainer","_handleMeasure","_measureTrack","_measureThumb","name","nativeEvent","layout","size","storeName","currentSize","_containerSize","_trackSize","_thumbSize","setState","_getRatio","minimumValue","maximumValue","ratio","thumbLeft","dx","step","Math","max","min","round","__getValue","setValue","_setCurrentValueAnimated","animationType","animationConfig","assign","toValue","start","event","_getTouchOverflowSize","thumbTouchSize","_getTouchOverflowStyle","touchOverflowStyle","undefined","verticalMargin","marginTop","marginBottom","horizontalMargin","marginLeft","marginRight","debugTouchArea","backgroundColor","opacity","thumbTouchRect","_getThumbTouchRect","locationX","locationY","touchOverflowSize","_renderDebugThumbTouchRect","positionStyle","left","top","createElement","style","defaultStyles","debugThumbTouchArea","pointerEvents","_renderThumbImage","thumbImage","source","componentWillMount","_panResponder","create","onStartShouldSetPanResponder","onMoveShouldSetPanResponder","_handleMoveShouldSetPanResponder","onPanResponderGrant","onPanResponderMove","onPanResponderRelease","onPanResponderTerminationRequest","_handlePanResponderRequestEnd","onPanResponderTerminate","componentWillReceiveProps","nextProps","newValue","animateTransitions","render","_a","minimumTrackTintColor","maximumTrackTintColor","thumbTintColor","styles","trackStyle","thumbStyle","other","mainStyles","interpolate","inputRange","outputRange","valueVisibleStyle","minimumTrackStyle","position","add","container","onLayout","track","renderToHardwareTextureAndroid","thumb","transform","translateX","translateY","touchArea","panHandlers","_getPropsForComponentUpdate","onValueChange","onSlidingStart","onSlidingComplete","otherProps","propTypes","number","bool","string","shape","func","oneOf","object","defaultProps","justifyContent","borderRadius","right","bottom"],"mappings":"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","file":"RNSlider.js","sourcesContent":["'use strict';\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { PureComponent, } from \"react\";\nimport { Animated, Image, StyleSheet, PanResponder, View, Easing, ViewPropTypes } from \"react-native\";\nimport PropTypes from 'prop-types';\nvar TRACK_SIZE = 4;\nvar THUMB_SIZE = 20;\nfunction Rect(x, y, width, height) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n}\nRect.prototype.containsPoint = function (x, y) {\n    return (x >= this.x\n        && y >= this.y\n        && x <= this.x + this.width\n        && y <= this.y + this.height);\n};\nvar DEFAULT_ANIMATION_CONFIGS = {\n    spring: {\n        friction: 7,\n        tension: 100\n    },\n    timing: {\n        duration: 150,\n        easing: Easing.inOut(Easing.ease),\n        delay: 0\n    },\n};\nexport default class Slider extends PureComponent {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            containerSize: { width: 0, height: 0 },\n            trackSize: { width: 0, height: 0 },\n            thumbSize: { width: 0, height: 0 },\n            allMeasured: false,\n            value: new Animated.Value(this.props.value),\n        };\n        this._handleStartShouldSetPanResponder = (e) => {\n            // Should we become active when the user presses down on the thumb?\n            return this._thumbHitTest(e);\n        };\n        this._handlePanResponderGrant = ( /*e: Object, gestureState: Object*/) => {\n            this._previousLeft = this._getThumbLeft(this._getCurrentValue());\n            this._fireChangeEvent('onSlidingStart');\n        };\n        this._handlePanResponderMove = (e, gestureState) => {\n            if (this.props.disabled) {\n                return;\n            }\n            this._setCurrentValue(this._getValue(gestureState));\n            this._fireChangeEvent('onValueChange');\n        };\n        this._handlePanResponderEnd = (e, gestureState) => {\n            if (this.props.disabled) {\n                return;\n            }\n            this._setCurrentValue(this._getValue(gestureState));\n            this._fireChangeEvent('onSlidingComplete');\n        };\n        this._measureContainer = (x) => {\n            this._handleMeasure('containerSize', x);\n        };\n        this._measureTrack = (x) => {\n            this._handleMeasure('trackSize', x);\n        };\n        this._measureThumb = (x) => {\n            this._handleMeasure('thumbSize', x);\n        };\n        this._handleMeasure = (name, x) => {\n            var { width, height } = x.nativeEvent.layout;\n            var size = { width: width, height: height };\n            var storeName = `_${name}`;\n            var currentSize = this[storeName];\n            if (currentSize && width === currentSize.width && height === currentSize.height) {\n                return;\n            }\n            this[storeName] = size;\n            if (this._containerSize && this._trackSize && this._thumbSize) {\n                this.setState({\n                    containerSize: this._containerSize,\n                    trackSize: this._trackSize,\n                    thumbSize: this._thumbSize,\n                    allMeasured: true,\n                });\n            }\n        };\n        this._getRatio = (value) => {\n            return (value - this.props.minimumValue) / (this.props.maximumValue - this.props.minimumValue);\n        };\n        this._getThumbLeft = (value) => {\n            var ratio = this._getRatio(value);\n            return ratio * (this.state.containerSize.width - this.state.thumbSize.width);\n        };\n        this._getValue = (gestureState) => {\n            var length = this.state.containerSize.width - this.state.thumbSize.width;\n            var thumbLeft = this._previousLeft + gestureState.dx;\n            var ratio = thumbLeft / length;\n            if (this.props.step) {\n                return Math.max(this.props.minimumValue, Math.min(this.props.maximumValue, this.props.minimumValue + Math.round(ratio * (this.props.maximumValue - this.props.minimumValue) / this.props.step) * this.props.step));\n            }\n            else {\n                return Math.max(this.props.minimumValue, Math.min(this.props.maximumValue, ratio * (this.props.maximumValue - this.props.minimumValue) + this.props.minimumValue));\n            }\n        };\n        this._getCurrentValue = () => {\n            return this.state.value.__getValue();\n        };\n        this._setCurrentValue = (value) => {\n            this.state.value.setValue(value);\n        };\n        this._setCurrentValueAnimated = (value) => {\n            var animationType = this.props.animationType;\n            var animationConfig = Object.assign({}, DEFAULT_ANIMATION_CONFIGS[animationType], this.props.animationConfig, { toValue: value });\n            Animated[animationType](this.state.value, animationConfig).start();\n        };\n        this._fireChangeEvent = (event) => {\n            if (this.props[event]) {\n                this.props[event](this._getCurrentValue());\n            }\n        };\n        this._getTouchOverflowSize = () => {\n            var state = this.state;\n            var props = this.props;\n            var size = {};\n            if (state.allMeasured === true) {\n                size.width = Math.max(0, props.thumbTouchSize.width - state.thumbSize.width);\n                size.height = Math.max(0, props.thumbTouchSize.height - state.containerSize.height);\n            }\n            return size;\n        };\n        this._getTouchOverflowStyle = () => {\n            var { width, height } = this._getTouchOverflowSize();\n            var touchOverflowStyle = {};\n            if (width !== undefined && height !== undefined) {\n                var verticalMargin = -height / 2;\n                touchOverflowStyle.marginTop = verticalMargin;\n                touchOverflowStyle.marginBottom = verticalMargin;\n                var horizontalMargin = -width / 2;\n                touchOverflowStyle.marginLeft = horizontalMargin;\n                touchOverflowStyle.marginRight = horizontalMargin;\n            }\n            if (this.props.debugTouchArea === true) {\n                touchOverflowStyle.backgroundColor = 'orange';\n                touchOverflowStyle.opacity = 0.5;\n            }\n            return touchOverflowStyle;\n        };\n        this._thumbHitTest = (e) => {\n            var nativeEvent = e.nativeEvent;\n            var thumbTouchRect = this._getThumbTouchRect();\n            return thumbTouchRect.containsPoint(nativeEvent.locationX, nativeEvent.locationY);\n        };\n        this._getThumbTouchRect = () => {\n            var state = this.state;\n            var props = this.props;\n            var touchOverflowSize = this._getTouchOverflowSize();\n            return new Rect(touchOverflowSize.width / 2 + this._getThumbLeft(this._getCurrentValue()) + (state.thumbSize.width - props.thumbTouchSize.width) / 2, touchOverflowSize.height / 2 + (state.containerSize.height - props.thumbTouchSize.height) / 2, props.thumbTouchSize.width, props.thumbTouchSize.height);\n        };\n        this._renderDebugThumbTouchRect = (thumbLeft) => {\n            var thumbTouchRect = this._getThumbTouchRect();\n            var positionStyle = {\n                left: thumbLeft,\n                top: thumbTouchRect.y,\n                width: thumbTouchRect.width,\n                height: thumbTouchRect.height,\n            };\n            return (React.createElement(Animated.View, { style: [defaultStyles.debugThumbTouchArea, positionStyle], pointerEvents: 'none' }));\n        };\n        this._renderThumbImage = () => {\n            var { thumbImage } = this.props;\n            if (!thumbImage)\n                return;\n            return React.createElement(Image, { source: thumbImage });\n        };\n    }\n    componentWillMount() {\n        this._panResponder = PanResponder.create({\n            onStartShouldSetPanResponder: this._handleStartShouldSetPanResponder,\n            onMoveShouldSetPanResponder: this._handleMoveShouldSetPanResponder,\n            onPanResponderGrant: this._handlePanResponderGrant,\n            onPanResponderMove: this._handlePanResponderMove,\n            onPanResponderRelease: this._handlePanResponderEnd,\n            onPanResponderTerminationRequest: this._handlePanResponderRequestEnd,\n            onPanResponderTerminate: this._handlePanResponderEnd,\n        });\n    }\n    ;\n    componentWillReceiveProps(nextProps) {\n        var newValue = nextProps.value;\n        if (this.props.value !== newValue) {\n            if (this.props.animateTransitions) {\n                this._setCurrentValueAnimated(newValue);\n            }\n            else {\n                this._setCurrentValue(newValue);\n            }\n        }\n    }\n    ;\n    render() {\n        var _a = this.props, { minimumValue, maximumValue, minimumTrackTintColor, maximumTrackTintColor, thumbTintColor, thumbImage, styles, style, trackStyle, thumbStyle, debugTouchArea } = _a, other = __rest(_a, [\"minimumValue\", \"maximumValue\", \"minimumTrackTintColor\", \"maximumTrackTintColor\", \"thumbTintColor\", \"thumbImage\", \"styles\", \"style\", \"trackStyle\", \"thumbStyle\", \"debugTouchArea\"]);\n        var { value, containerSize, trackSize, thumbSize, allMeasured } = this.state;\n        var mainStyles = styles || defaultStyles;\n        var thumbLeft = value.interpolate({\n            inputRange: [minimumValue, maximumValue],\n            outputRange: [0, containerSize.width - thumbSize.width],\n        });\n        var valueVisibleStyle = {};\n        if (!allMeasured) {\n            valueVisibleStyle.opacity = 0;\n        }\n        var minimumTrackStyle = Object.assign({ position: 'absolute', width: Animated.add(thumbLeft, thumbSize.width / 2), backgroundColor: minimumTrackTintColor }, valueVisibleStyle);\n        var touchOverflowStyle = this._getTouchOverflowStyle();\n        return (React.createElement(View, Object.assign({}, other, { style: [mainStyles.container, style], onLayout: this._measureContainer }),\n            React.createElement(View, { style: [{ backgroundColor: maximumTrackTintColor, }, mainStyles.track, trackStyle], renderToHardwareTextureAndroid: true, onLayout: this._measureTrack }),\n            React.createElement(Animated.View, { renderToHardwareTextureAndroid: true, style: [mainStyles.track, trackStyle, minimumTrackStyle] }),\n            React.createElement(Animated.View, { onLayout: this._measureThumb, renderToHardwareTextureAndroid: true, style: [\n                    { backgroundColor: thumbTintColor },\n                    mainStyles.thumb, thumbStyle,\n                    Object.assign({ transform: [\n                            { translateX: thumbLeft },\n                            { translateY: 0 }\n                        ] }, valueVisibleStyle)\n                ] }, this._renderThumbImage()),\n            React.createElement(View, Object.assign({ renderToHardwareTextureAndroid: true, style: [defaultStyles.touchArea, touchOverflowStyle] }, this._panResponder.panHandlers), debugTouchArea === true && this._renderDebugThumbTouchRect(thumbLeft))));\n    }\n    ;\n    _getPropsForComponentUpdate(props) {\n        var { value, onValueChange, onSlidingStart, onSlidingComplete, style, trackStyle, thumbStyle } = props, otherProps = __rest(props, [\"value\", \"onValueChange\", \"onSlidingStart\", \"onSlidingComplete\", \"style\", \"trackStyle\", \"thumbStyle\"]);\n        return otherProps;\n    }\n    ;\n    _handleMoveShouldSetPanResponder( /*e: Object, gestureState: Object*/) {\n        // Should we become active when the user moves a touch over the thumb?\n        return false;\n    }\n    ;\n    _handlePanResponderRequestEnd(e, gestureState) {\n        // Should we allow another component to take over this pan?\n        return false;\n    }\n    ;\n}\nSlider.propTypes = {\n    /**\n     * Initial value of the slider. The value should be between minimumValue\n     * and maximumValue, which default to 0 and 1 respectively.\n     * Default value is 0.\n     *\n     * *This is not a controlled component*, e.g. if you don't update\n     * the value, the component won't be reset to its inital value.\n     */\n    value: PropTypes.number,\n    /**\n     * If true the user won't be able to move the slider.\n     * Default value is false.\n     */\n    disabled: PropTypes.bool,\n    /**\n     * Initial minimum value of the slider. Default value is 0.\n     */\n    minimumValue: PropTypes.number,\n    /**\n     * Initial maximum value of the slider. Default value is 1.\n     */\n    maximumValue: PropTypes.number,\n    /**\n     * Step value of the slider. The value should be between 0 and\n     * (maximumValue - minimumValue). Default value is 0.\n     */\n    step: PropTypes.number,\n    /**\n     * The color used for the track to the left of the button. Overrides the\n     * default blue gradient image.\n     */\n    minimumTrackTintColor: PropTypes.string,\n    /**\n     * The color used for the track to the right of the button. Overrides the\n     * default blue gradient image.\n     */\n    maximumTrackTintColor: PropTypes.string,\n    /**\n     * The color used for the thumb.\n     */\n    thumbTintColor: PropTypes.string,\n    /**\n     * The size of the touch area that allows moving the thumb.\n     * The touch area has the same center has the visible thumb.\n     * This allows to have a visually small thumb while still allowing the user\n     * to move it easily.\n     * The default is {width: 40, height: 40}.\n     */\n    thumbTouchSize: PropTypes.shape({ width: PropTypes.number, height: PropTypes.number }),\n    /**\n     * Callback continuously called while the user is dragging the slider.\n     */\n    onValueChange: PropTypes.func,\n    /**\n     * Callback called when the user starts changing the value (e.g. when\n     * the slider is pressed).\n     */\n    onSlidingStart: PropTypes.func,\n    /**\n     * Callback called when the user finishes changing the value (e.g. when\n     * the slider is released).\n     */\n    onSlidingComplete: PropTypes.func,\n    /**\n     * The style applied to the slider container.\n     */\n    style: ViewPropTypes.style,\n    /**\n     * The style applied to the track.\n     */\n    trackStyle: ViewPropTypes.style,\n    /**\n     * The style applied to the thumb.\n     */\n    thumbStyle: ViewPropTypes.style,\n    /**\n     * Sets an image for the thumb.\n     */\n    thumbImage: Image.propTypes.source,\n    /**\n     * Set this to true to visually see the thumb touch rect in green.\n     */\n    debugTouchArea: PropTypes.bool,\n    /**\n     * Set to true to animate values with default 'timing' animation type\n     */\n    animateTransitions: PropTypes.bool,\n    /**\n     * Custom Animation type. 'spring' or 'timing'.\n     */\n    animationType: PropTypes.oneOf(['spring', 'timing']),\n    /**\n     * Used to configure the animation parameters.  These are the same parameters in the Animated library.\n     */\n    animationConfig: PropTypes.object,\n};\nSlider.defaultProps = {\n    value: 0,\n    minimumValue: 0,\n    maximumValue: 1,\n    step: 0,\n    minimumTrackTintColor: '#3f3f3f',\n    maximumTrackTintColor: '#b3b3b3',\n    thumbTintColor: '#343434',\n    thumbTouchSize: { width: 40, height: 40 },\n    debugTouchArea: false,\n    animationType: 'timing'\n};\nvar defaultStyles = StyleSheet.create({\n    container: {\n        height: 40,\n        justifyContent: 'center',\n    },\n    track: {\n        height: TRACK_SIZE,\n        borderRadius: TRACK_SIZE / 2,\n    },\n    thumb: {\n        position: 'absolute',\n        width: THUMB_SIZE,\n        height: THUMB_SIZE,\n        borderRadius: THUMB_SIZE / 2,\n    },\n    touchArea: {\n        position: 'absolute',\n        backgroundColor: 'transparent',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n    },\n    debugThumbTouchArea: {\n        position: 'absolute',\n        backgroundColor: 'green',\n        opacity: 0.5,\n    }\n});\n//# sourceMappingURL=RNSlider.js.map"]}